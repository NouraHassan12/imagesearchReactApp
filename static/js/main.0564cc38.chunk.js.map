{"version":3,"sources":["Components/Imagesearch.js","Components/Imagelist.js","App.js","serviceWorker.js","Components/Imageview.js","AppRouter.js","index.js"],"names":["Imagesearch","props","className","onSubmit","handelGetImg","type","autoComplete","placeholder","name","Imagelist","Images","map","image","key","id","style","marginBottom","src","largeImageURL","alt","tags","to","pathname","state","Api_key","App","error","e","a","preventDefault","searchTerm","target","elements","searchValue","value","Url","fetch","Request","json","Response","setState","hits","console","log","color","textAlign","this","Component","Boolean","window","location","hostname","match","Imageview","owner","user","pageURL","href","substring","AppRouter","basename","process","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"iYAGe,SAASA,EAAYC,GAClC,OACE,yBAAKC,UAAU,eAEjB,0BAAMC,SAAUF,EAAMG,aAAcF,UAAU,qBAC1C,2BAAOG,KAAK,OAAOC,aAAa,MAAMC,YAAY,uBAAwBC,KAAK,gBAC/E,4BAAQN,UAAU,OAAlB,Y,iBCLS,SAASO,EAAUR,GAChC,OACE,yBAAKC,UAAU,aACf,yBAAKA,UAAU,OACXD,EAAMS,OAAOC,KAAI,SAAAC,GACjB,OACE,yBAAKC,IAAKD,EAAME,GAAIZ,UAAU,WAAWa,MAAO,CAAEC,aAAa,SAC/D,yBAAKd,UAAU,yBAEX,yBAAKA,UAAU,mBAAmBe,IAAKL,EAAMM,cAAeC,IAAKP,EAAMQ,OAIzE,yBAAKlB,UAAU,kBACb,kBAAC,IAAD,CAAMmB,GAAI,CACNC,SAAS,UAAD,OAAYV,EAAME,IAC1BS,MAAO,CAAEX,WACR,iDCbnB,IAAMY,EAAU,qCAGKC,E,4MAEnBF,MAAM,CACJb,OAAO,GACPgB,MAAO,M,EAIXtB,a,uCAAc,WAAOuB,GAAP,qBAAAC,EAAA,6DACZD,EAAEE,iBACIC,EAAaH,EAAEI,OAAOC,SAASC,YAAYC,MAC3CC,EAHM,uCAGgCX,EAHhC,cAG6CM,EAH7C,8BAISM,MAAMD,GAJf,cAINE,EAJM,gBAKUA,EAAQC,OALlB,OAKNC,EALM,OAMPT,EAGH,EAAKU,SAAS,CAAE9B,OAAQ6B,EAASE,KAAMf,MAAO,OAF9C,EAAKc,SAAS,CAAEd,MAAO,4BAIzBgB,QAAQC,IAAIJ,EAASE,MAXT,4C,6GAmBV,OACE,yBAAK1B,MAAO,CAAE6B,MAAM,OAAQC,UAAU,WACvC,kBAAC7C,EAAD,CAAaI,aAAc0C,KAAK1C,eAEN,OAArB0C,KAAKvB,MAAMG,MACX,yBAAKX,MAAO,CAAE6B,MAAM,OAAQC,UAAU,WAAcC,KAAKvB,MAAMG,OAC/D,kBAACjB,EAAD,CAAWC,OAAQoC,KAAKvB,MAAMb,c,GAjCPqC,aCCbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iBCdS,SAASC,EAAUpD,GAChCyC,QAAQC,IAAI1C,EAAMiD,SAAS3B,MAAMX,OADM,MAEsBX,EAAMiD,SAAS3B,MAAMX,MAA3DA,EAFgB,EAE/BM,cAA4BoC,EAFG,EAETC,KAAanC,EAFJ,EAEIA,KAAMoC,EAFV,EAEUA,QACjD,OACE,6BACC,yBAAKtD,UAAU,aACd,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,wBACb,yBAAKe,IAAKL,EAAOO,IAAKC,EAAMlB,UAAU,kCACtC,yBAAKA,UAAU,wBACb,2CAEF,yBAAKA,UAAU,mBACb,uCAAY,8BAAOoD,IACnB,yCAAc,8BAAM,uBAAGvB,OAAO,SAAS0B,KAAMD,GAAYA,EAAQE,UAAU,EAAG,IAA1D,yBACpB,4BAAQxD,UAAU,yBAChB,kBAAC,IAAD,CAAMmB,GAAG,KAAT,eChBD,SAASsC,IACtB,OACE,kBAAC,IAAD,CAAeC,SAAUC,wBACzB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWvC,IACjC,kBAAC,IAAD,CAAOsC,KAAK,aAAaC,UAAWX,MCF1CY,IAASC,OAEL,kBAACP,EAAD,MAEDQ,SAASC,eAAe,SHuHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjD,GACLgB,QAAQhB,MAAMA,EAAMkD,c","file":"static/js/main.0564cc38.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../Stylesheets/imagesearchCSS.css';\r\n\r\nexport default function Imagesearch(props) {\r\n  return (\r\n    <div className=\"imageSearch\">\r\n\r\n  <form onSubmit={props.handelGetImg} className=\"imageSearch__form\">\r\n      <input type=\"text\" autoComplete=\"off\" placeholder=\"search for images...\"  name=\"searchValue\"/>\r\n      <button className=\"btn\">search</button>\r\n  </form>\r\n  </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport '../Stylesheets/imagelistCSS.css'\r\n\r\nexport default function Imagelist(props) {\r\n  return (\r\n    <div className=\"container\">\r\n    <div className=\"row\">\r\n      { props.Images.map(image => {\r\n        return (\r\n          <div key={image.id} className=\"col-md-4\" style={{ marginBottom:\"2rem\" }}>\r\n          <div className=\"imageList__containerr\">\r\n            \r\n              <img className=\"imageList__image\" src={image.largeImageURL} alt={image.tags} />\r\n             \r\n            \r\n\r\n            <div className=\"image__details\">\r\n              <Link to={{ \r\n                  pathname: `/image/${image.id}`,\r\n                  state: { image }\r\n                }}><button>View</button></Link>\r\n              </div>\r\n          </div>\r\n\r\n         </div>\r\n\r\n    ) }\r\n\r\n      )\r\n}\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\nimport '../src/App.css';\nimport Imagesearch from './Components/Imagesearch';\nimport Imagelist from './Components/Imagelist';\n\n\n\n\nconst Api_key = \"17299124-1ad73a45a9fe95766d7589051\";\n\n\nexport default class App extends Component {\n\n  state={\n    Images:[],\n    error: null\n  }\n \n  \nhandelGetImg= async (e)=>{\n  e.preventDefault();\n  const searchTerm = e.target.elements.searchValue.value;\n  const Url = `https://pixabay.com/api/?key=${Api_key}&q=${searchTerm}&image_type=photo`;\n  const Request =await fetch(Url)\n  const Response =await Request.json();\n  if (!searchTerm) {\n    this.setState({ error: \"Please provide a value.\" })\n  } else {\n    this.setState({ Images: Response.hits, error: null })\n  }\n  console.log(Response.hits);\n}\n\n\n// componentDidMount(){\n//   this.handelGetImg();\n// }\n  render() {\n    return (\n      <div style={{ color:\"#fff\", textAlign:\"center\" }}>\n     <Imagesearch handelGetImg={this.handelGetImg} />\n     { \n          this.state.error !== null ? \n          <div style={{ color:\"#fff\", textAlign:\"center\" }}>{ this.state.error }</div> : \n          <Imagelist Images={this.state.Images} />\n        }\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport {Link } from 'react-router-dom';\r\nimport '../Stylesheets/imageviewCSS.css';\r\n\r\nexport default function Imageview(props) {\r\n  console.log(props.location.state.image)\r\n  const { largeImageURL: image, user: owner, tags, pageURL } = props.location.state.image\r\n  return (\r\n    <div>\r\n     <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-12\">\r\n          <div className=\"imageView__container\">\r\n            <img src={image} alt={tags} className=\"imageView__img img-responsive\" />\r\n            <div className=\"imageView__copyright\">\r\n              <p>&copy;pixabay</p>\r\n            </div>\r\n            <div className=\"imageView__text\">\r\n              <h4>Credit: <span>{owner}</span></h4>\r\n              <h4>Download: <span><a target=\"_blank\" href={pageURL }>{ pageURL.substring(0, 10) }...[VIEW FULL LINK]</a></span></h4>\r\n              <button className=\"active-recipe__button\">\r\n                <Link to=\"/\">Home</Link>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\"\r\nimport App from './App';\r\nimport Imageview from './Components/Imageview'\r\n\r\nexport default function AppRouter() {\r\n  return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <Switch>\r\n      <Route exact path=\"/\" component={App}  />\r\n      <Route path=\"/image/:id\" component={Imageview} />\r\n    </Switch>\r\n  </BrowserRouter>\r\n  );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport AppRouter from './AppRouter';\n\n\nReactDOM.render(\n  // <React.StrictMode>\n    <AppRouter />\n  // </React.StrictMode>,\n , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}